Question 3: By default, do Django signals run in the same database transaction as
the caller? Please support your answer with a code snippet that conclusively proves
your stance. The code does not need to be elegant and production ready, we just need
to understand your logic.
Ans:

By default, Django signals run in the same database transaction as the caller. 
This means that if a signal is triggered by a database operation (such as saving a model instance),
the signal handlers will execute within the same transaction as that operation. As a result, 
if the transaction is rolled back, the changes made by the signal handler will also be reverted.


# models.py

from django.db import models, transaction
from django.db.models.signals import post_save
from django.dispatch import receiver

# A simple model for demonstration
class MyModel(models.Model):
    name = models.CharField(max_length=100)

# Another model to demonstrate transaction rollback
class AuditLog(models.Model):
    message = models.CharField(max_length=255)

# Signal receiver function that creates an audit log entry
@receiver(post_save, sender=MyModel)
def create_audit_log(sender, instance, **kwargs):
    AuditLog.objects.create(message=f"Model {instance.name} was created.")

# Function to test transaction rollback
def test_transaction_rollback():
    try:
        with transaction.atomic():
            # Create a model instance
            MyModel.objects.create(name="Test")

            # At this point, an audit log entry should be created by the signal handler

            # Simulate an error that causes the transaction to rollback
            raise Exception("Triggering rollback")

    except Exception as e:
        print(f"Exception caught: {e}")

# Output:
 Exception caught: Triggering rollback
 The AuditLog table should be empty, showing that the signal handler's changes were rolled back.

